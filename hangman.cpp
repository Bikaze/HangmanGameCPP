#include <iostream> //To be able to use input-output stream
#include <cctype> //To be able to use tolower() function
#include <cstdlib> //To be able to use rand() and srand() functions
#include <ctime> //To be able to use the time() function
#include <vector> //To be able to use the vectors 
using namespace std;

//Function ExistIn(char, vector<char>&) checks whether the a character exists in a vector of characters
bool ExistIn(char c, vector<char>& a) {
  for(auto i : a) {
    if(i == c) {
      return true;
    }
  }
  return false;
}

int main() {
  //word_list contains a words to be referred to in the game
  vector<string> word_list{"cat", "dog", "sun", "hat", "pen", "ball", "fish", "tree", "book", "duck", "moon", "star", "cake", "bird", "frog", "house", "car", "bug", "key", "ship", "bed", "rain", "apple", "bear", "coat", "leaf", "milk", "ring", "road", "sock"};
  vector<char> answer(0);//answer vector will hold true user inputs
  vector<char> word(0);//word vector will hold characters of the word choosen from word_list vector 
  vector<char> vowels{'a', 'i', 'u', 'o', 'e'}; //This a vector containing vowels
  vector<char> consonants{'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'};//This a vector containing consonants
  srand(time(0));//srand() provides a seed for the rand() function
  int n = rand();//n is a random number generated by rand()
  int k = word_list.size();//k holds the size of word_list
  n = n%k;//n becomes a valid number in the range of the size of word_list
  string random_word = word_list[n]; //random_word holds a word randomly using a current value of n
  for(int i = 0; i < random_word.length(); i++) {
    word.push_back(tolower(random_word[i]));    //push lowercase version of each character of random_word in the vector word
  }
  
  for(int i = 0; i < random_word.length(); i++) {
    answer.push_back('_');                  //push '_' characters in answer vector times equal to the size of word vector/random_word.length()
  }

  cout<<"You are going to guess this word: ";
  for(auto i : answer) {
    cout<<i<<" ";     //Display answer with '_' characters only
  }
  cout<<endl;
  
  int lives = 6; //number of lives/possible guesses
  int warnings = 3;//number of warnings

  while (ExistIn('_', answer) && lives > 0) {//While there are still '_' characters in the answer and the number of lives is greater than zero
    char guess; //Takes user input character
    cout<<"Guess a letter in the word.\n> ";
    cin>>guess;
    guess = tolower(guess);//convert guess character to lowerCase

    //If the guessed character is already in answer or it is not a character of the alphabet ...
    if(ExistIn(guess, answer) || (!ExistIn(guess, consonants) && !ExistIn(guess, vowels))){
      if(warnings > 0) {
        warnings --;  //reduce warnings if they are available or else...
      }else {
        lives --;     //reduce lives
      }
      if(ExistIn(guess, answer)) {  //If the guessed character is already in answer
         cout<<"Warning: You have already input '"<<guess<<"'"<<endl; 
      }else {
        cout<<"Please enter a valid letter of the Alphabet."<<endl;//If the guessed character is not of the alphabet
      }
    }else if(!ExistIn(guess, word)){ //If the guessed character is not found in the secret word ...
      cout<<"'"<<guess<<"' is not in the word."<<endl;
      if(ExistIn(guess, consonants)) { //if the guessed character is a consonant remove one life/chance/guess
        lives --;
      }else {    //if it is a vowel remove two lives
        lives -= 2;
      }
    }else { //otherwise if the input character is in the secret word just ...
      for(int i = 0; i < answer.size(); i++) {
        if(answer[i] == '_' && word[i] == guess) {
          answer[i] = guess;    //fill it everywhere in the answer vector as it occurs in the (secret) word vector 
        }
      }
    }
    //On each iteration show the user ... 
    cout<<"Progress: ";
    for(auto i : answer) {
      cout<<i<<" ";  //The remaining places to be filled
    }
    cout<<endl<<"Remaining Life: "<<lives<<endl<<endl;  //The remaining life/chance to play
  }

  if(lives <= 0) { //If we are out of the while loop and the lives are less of equal to zero the player must have lost
    if(lives < 0) {  //In case the lives drop into the negatives equate them to zero as no lives/chances are less than zero
      lives = 0;
    }
    cout<<"You lose."<<endl; 
  }else {  //Feedback for the Winner
    cout<<"Congratulations, You Win!"<<endl;  
    cout<<"Score: "<<lives*answer.size()<<endl;
    cout<<"Perfection(%): "<<lives*100/6<<"%"<<endl;
  }
  cout<<"Word: ";
  for(auto i : word) {    //Display the secret word of the instance of the game. 
    cout<<i<<"";
  }
  cout<<endl;
  return 0;
}